--- a/arch/mips/kernel/setup.c
+++ b/arch/mips/kernel/setup.c
@@ -646,6 +646,7 @@ static void __init arch_mem_init(char **
 	}

 	bootmem_init();
+
 #ifdef CONFIG_PROC_VMCORE
 	if (setup_elfcorehdr && setup_elfcorehdr_size) {
 		printk(KERN_INFO "kdump reserved memory at %lx-%lx\n",
--- a/arch/mips/ralink/init.c
+++ b/arch/mips/ralink/init.c
@@ -74,7 +74,7 @@ int *_prom_argv, *_prom_envp;
  * YAMON (32-bit PROM) pass arguments and environment as 32-bit pointer.
  * This macro take care of sign extension, if running in 64-bit mode.
  */
-#define prom_envp(index) ((char *)(((int *)(int)_prom_envp)[(index)]))
+#define prom_envp(index) ((char *)(((char **)_prom_envp)[(index)]))

 int init_debug = 0;

@@ -87,16 +87,13 @@ char *prom_getenv(char *envname)
 	 * workarounds, if we are running in 64-bit mode.
 	 */
 	int i, index=0;
-	// Dennis Lee +
-	return NULL;
-	//
 	i = strlen(envname);

 	while (prom_envp(index)) {
 		if(strncmp(envname, prom_envp(index), i) == 0) {
-			return(prom_envp(index+1));
+			return(prom_envp(index) + i + 1);
 		}
-		index += 2;
+		index++;
 	}

 	return NULL;
@@ -768,11 +765,9 @@ __init void prom_init(void)
 	int result __maybe_unused;
 #endif

-#ifdef CONFIG_UBOOT_CMDLINE
 	prom_argc = (int)fw_arg0;
 	_prom_argv = (int *)fw_arg1;
 	_prom_envp = (int *)fw_arg2;
-#endif

 	prom_init_cmdline();

@@ -783,17 +778,12 @@ __init void prom_init(void)
 	serial_init(57600);

 	prom_init_serial_port();  /* Needed for Serial Console */
+	prom_setup_printf(prom_get_ttysnum());
+	prom_printf("\nLINUX started...\n");

 	prom_meminit();
 	prom_usbinit();		/* USB power saving*/
 	prom_pcieinit();	/* PCIe power saving*/
-	prom_setup_printf(prom_get_ttysnum());
-	prom_printf("\nLINUX started...\n");
-#if defined(CONFIG_RT2880_FPGA) || defined(CONFIG_RT3052_FPGA) || defined(CONFIG_RT3352_FPGA) || defined(CONFIG_RT2883_FPGA) || defined(CONFIG_RT3883_FPGA) || defined(CONFIG_RT5350_FPGA) || defined (CONFIG_RT6855_FPGA) || defined(CONFIG_MT7620_FPGA) || defined (CONFIG_MT7621_FPGA) || defined (CONFIG_MT7628_FPGA)
-	prom_printf("\n THIS IS FPGA\n");
-#elif defined(CONFIG_RT2880_ASIC) || defined(CONFIG_RT3052_ASIC) || defined(CONFIG_RT3352_ASIC) || defined (CONFIG_RT2883_ASIC) || defined (CONFIG_RT3883_ASIC) || defined (CONFIG_RT5350_ASIC) || defined (CONFIG_RT6855_ASIC) || defined (CONFIG_MT7620_ASIC) || defined (CONFIG_MT7621_ASIC) || defined (CONFIG_MT7628_ASIC)
-	prom_printf("\n THIS IS ASIC\n");
-#endif

 #if defined (CONFIG_IRQ_GIC)

--- a/arch/mips/ralink/memory.c
+++ b/arch/mips/ralink/memory.c
@@ -43,9 +43,10 @@
 #include <linux/ioport.h>
 #include <asm/bootinfo.h>
 #include <asm/page.h>
+#include <linux/sizes.h>

 #include <asm/mach-ralink/prom.h>
-//#define DEBUG
+#undef DEBUG

 enum surfboard_memtypes {
 	surfboard_dontuse,
@@ -98,18 +99,17 @@ struct prom_pmemblock * __init prom_getm
 #ifdef DEBUG
 		prom_printf("ramsize = %s\n", env_str);
 #endif
-		ramsize = simple_strtol(env_str, NULL, 0);
+		ramsize = memparse(env_str, NULL);
 	}

 	env_str = prom_getenv("rambase");
 	if (!env_str) {
 #if defined(CONFIG_RT2880_ASIC) || defined(CONFIG_RT2880_FPGA)
-		prom_printf("rambase not set, set to default (0x08000000)\n");
 		rambase = 0x08000000;
 #else
-		prom_printf("rambase not set, set to default (0x00000000)\n");
 		rambase = 0x00000000;
 #endif
+		prom_printf("rambase not set, set to default (0x%08x)\n", rambase);
 	} else {
 #ifdef DEBUG
 		prom_printf("rambase = %s\n", env_str);
@@ -123,9 +123,17 @@ struct prom_pmemblock * __init prom_getm
 	mdesc[0].base = rambase;
 	mdesc[0].size = ramsize;

+#if defined(CONFIG_MT7621_ASIC)
+	if (ramsize > 448 * SZ_1M){
+		mdesc[0].size = 448 * SZ_1M;
+		mdesc[1].type = surfboard_ram;
+		mdesc[1].base = 0x20000000;
+		mdesc[1].size = 64 * SZ_1M;
+	}
+#endif
+
 	return &mdesc[0];
 }
-#if 0
 static int __init prom_memtype_classify (unsigned int type)
 {
 	switch (type) {
@@ -137,32 +145,16 @@ static int __init prom_memtype_classify
 		return BOOT_MEM_RESERVED;
 	}
 }
-#endif

 void __init prom_meminit(void)
 {
-	//struct prom_pmemblock *p;
+	struct prom_pmemblock *p;
 #ifdef DEBUG
 	struct prom_pmemblock *psave;
 #endif

-	//printk("ram start= %x, ram end= %x\n",rt2880_res_ram.start, rt2880_res_ram.end);
-	//printk("size = %x\n",rt2880_res_ram.end - rt2880_res_ram.start);
- 	//add_memory_region(0x0a000000, rt2880_res_ram.end - rt2880_res_ram.start, BOOT_MEM_RAM);
-#if defined(CONFIG_RT2880_ASIC) || defined(CONFIG_RT2880_FPGA)
- 	add_memory_region(0x08000000, RAM_SIZE, BOOT_MEM_RAM);
-#elif defined(CONFIG_MT7621_ASIC) || defined(CONFIG_MT7621_FPGA)
-#if defined (CONFIG_RT2880_DRAM_512M)
- 	add_memory_region(0x00000000, RAM_SIZE + 64*1024*1024, BOOT_MEM_RAM);
-#else
- 	add_memory_region(0x00000000, RAM_SIZE, BOOT_MEM_RAM);
-#endif
-
-#else
-        add_memory_region(0x00000000, RAM_SIZE, BOOT_MEM_RAM);
-#endif

-	//p = prom_getmdesc();
+	p = prom_getmdesc();
 #ifdef DEBUG
 	prom_printf("MEMORY DESCRIPTOR dump:\n");
 	psave = p;	/* Save p */
@@ -176,7 +168,6 @@ void __init prom_meminit(void)
 	p = psave;	/* Restore p */

 #endif
-#if 0
 	while (p->size) {
 		long type;
 		unsigned long base, size;
@@ -187,7 +178,6 @@ void __init prom_meminit(void)
 		add_memory_region(base, size, type);
                 p++;
 	}
-#endif
 }

 void __init prom_free_prom_memory(void)
